---
#
# zim framework
#
- name: .zimrc check
  ansible.builtin.stat:
    path: "{{ home_directory }}/.zimrc"
  register: zimrc
  tags:
    - zimfw
    - install

- name: .zimrc cleanup
  ansible.builtin.file:
    path: "{{ home_directory }}/.zimrc"
    state: absent
  tags:
    - never

- name: .zim check
  ansible.builtin.stat:
    path: "{{ home_directory }}/.zim"
  register: zim
  tags:
    - zimfw
    - install

- name: zimfw installation
  ansible.builtin.shell: "set -o pipefail && curl -fsSL {{ zimfw.url }} | zsh"
  args:
    warn: false
  when: not zimrc.stat.exists and not zim.stat.exists
  tags:
    - zimfw
    - install

- name: zimfw configuration
  ansible.builtin.file:
    src: "{{ role_path }}/files/zimfw/{{ item }}"
    dest: "{{ home_directory }}/{{ item }}"
    state: link
    force: true
  loop:
    - "{{ zimfw.files|flatten(levels=1) }}"
  tags:
    - zimfw
    - config

- name: zimfw configuration cleanup
  ansible.builtin.file:
    path: "{{ home_directory }}/{{ item }}"
    state: absent
  loop:
    - "{{ zimfw.files|flatten(levels=1) }}"
  tags:
    - never

#
# zsh configuration
#
- name: Shell zsh configuration
  ansible.builtin.file:
    src: "{{ role_path }}/files/shell/zsh/{{ item }}"
    dest: "{{ home_directory }}/{{ item }}"
    state: link
    force: true
  loop:
    - "{{ zsh.files|flatten(levels=1) }}"
  tags:
    - dotfiles
    - zsh

- name: Shell zsh configuration cleanup
  ansible.builtin.file:
    path: "{{ home_directory }}/{{ item }}"
    state: absent
  loop:
    - "{{ zsh.files|flatten(levels=1) }}"
  tags:
    - never

- name: Shell zsh custom functions
  ansible.builtin.file:
    src: "{{ role_path }}/files/shell/zsh.d"
    dest: "{{ home_directory }}/.zsh.d"
    state: link
    force: true
  tags:
    - dotfiles
    - zsh

- name: Shell zsh custom functions cleanup
  ansible.builtin.file:
    path: "{{ home_directory }}/.zsh.d"
    state: absent
  tags:
    - never

#
# RC files
#
- name: RC files
  ansible.builtin.file:
    src: "{{ role_path }}/files/shell/rc/{{ item }}"
    dest: "{{ home_directory }}/{{ item }}"
    state: link
    force: true
  loop:
    - "{{ rc.files }}"
  tags:
    - dotfiles
    - rc

- name: RC files cleanup
  ansible.builtin.file:
    path: "{{ home_directory }}/{{ item }}"
    state: absent
  loop:
    - "{{ rc.files }}"
  tags:
    - never

#
# Tools
#
- name: Tools configuration files
  ansible.builtin.file:
    src: "{{ role_path }}/files/tools/{{ item }}"
    dest: "{{ home_directory }}/{{ item }}"
    state: link
    force: true
  loop:
    - "{{ tools.files }}"
  tags:
    - dotfiles
    - tools

- name: Tools configuration files cleanup
  ansible.builtin.file:
    path: "{{ home_directory }}/{{ item }}"
    state: absent
  loop:
    - "{{ tools.files }}"
  tags:
    - never

#
# Templates
#
- name: Skeleton templates
  ansible.builtin.file:
    src: "{{ role_path }}/files/skeletons"
    dest: "{{ home_directory }}/.skeletons"
    state: link
    force: true
  tags:
    - dotfiles
    - skeletons

- name: Skeleton templates cleanup
  ansible.builtin.file:
    path: "{{ home_directory }}/.skeletons"
    state: absent
  tags:
    - never

#
# Scripts
#
- name: Custom Scripts directory
  ansible.builtin.file:
    src: "{{ role_path }}/files/shell/scripts"
    dest: "{{ home_directory }}/.bin"
    state: link
    force: true
  tags:
    - dotfiles
    - scripts

- name: Custom Scripts directory cleanup
  ansible.builtin.file:
    path: "{{ home_directory }}/.bin"
    state: absent
  tags:
    - never

#
# SSH
#
- name: SSH directory
  ansible.builtin.file:
    path: "{{ home_directory }}/.ssh"
    mode: 0750
    state: directory
  register: ssh_directory
  tags:
    - dotfiles
    - ssh

- name: SSH directory stat
  ansible.builtin.stat:
    path: "{{ home_directory }}/.ssh"
  register: ssh_directory
  tags:
    - dotfiles
    - ssh

- name: SSH config
  ansible.builtin.file:
    src: "{{ role_path }}/files/ssh/config"
    dest: "{{ home_directory }}/.ssh/config"
    state: link
    force: true
  when: ssh_directory.stat.exists
  tags:
    - dotfiles
    - ssh

- name: SSH config cleanup
  ansible.builtin.file:
    path: "{{ home_directory }}/.ssh/config"
    state: absent
  tags:
    - never

#
# Languages
#
- name: golang
  ansible.builtin.file:
    src: "{{ role_path }}/files/languages/go/.gorc"
    dest: "{{ home_directory }}/.gorc"
    state: link
    force: true
  tags:
    - dotfiles
    - languages
    - golang

- name: golang cleanup
  ansible.builtin.file:
    path: "{{ home_directory }}/.gorc"
    state: absent
  tags:
    - never

- name: cargo directory
  ansible.builtin.stat:
    path: "{{ home_directory }}/.cargo"
  register: cargo_directory
  tags:
    - dotfiles
    - languages
    - rust

- name: rust
  ansible.builtin.file:
    src: "{{ role_path }}/files/languages/rust/env"
    dest: "{{ home_directory }}/.cargo/env"
    state: link
    force: true
  when: cargo_directory.stat.exists
  tags:
    - dotfiles
    - languages
    - rust

- name: rust cleanup
  ansible.builtin.file:
    path: "{{ home_directory }}/.cargo/env"
    state: absent
  tags:
    - never

#
# Homebrew
#
- name: Homebrew install
  ansible.builtin.debug:
    msg: "How to install: {{ homebrew.install.url }}"
  tags:
    - dotfiles
    - homebrew

- name: Homebrew uninstall
  ansible.builtin.debug:
    msg: "How to uninstall: {{ homebrew.uninstall.url }}"
  tags:
    - dotfiles
    - homebrew

#
# vim
#
- name: vim config files
  ansible.builtin.file:
    src: "{{ role_path }}/files/vim/{{ item }}"
    dest: "{{ home_directory }}/{{ item }}"
    state: link
    force: true
  loop:
    - "{{ vim.config.files }}"
  tags:
    - dotfiles
    - vim

- name: vim config files cleanup
  ansible.builtin.file:
    path: "{{ home_directory }}/{{ item }}"
    state: absent
  loop:
    - "{{ vim.config.files }}"
  tags:
    - never

- name: vim config directories
  ansible.builtin.file:
    path: "{{ home_directory }}/.vim/autoload"
    mode: 0750
    state: directory
  register: vim_config_directory
  tags:
    - dotfiles
    - vim

- name: vim plug installation
  ansible.builtin.get_url:
    url: "{{ vim.plug.url }}"
    dest: "{{ home_directory }}/.vim/autoload/plug.vim"
    mode: 0750
  tags:
    - dotfiles
    - vim

- name: vim plug installation cleanup
  ansible.builtin.file:
    path: "{{ home_directory }}/.vim"
    state: absent
  tags:
    - never

- name: vim plug plugins installation
  ansible.builtin.debug:
    msg: "To complete the installation of your plugins you must execute: 'vim +PlugUpdate'"
  tags:
    - dotfiles
    - vim

#
# neovim
#
- name: nvim configuration directory
  ansible.builtin.file:
    path: "{{ home_directory }}/.config/nvim"
    mode: 0750
    state: directory
  register: nvim_config_directory
  tags:
    - dotfiles
    - nvim

- name: neovim configuration file
  ansible.builtin.file:
    src: "{{ role_path }}/files/neovim/init.vim"
    dest: "{{ home_directory }}/.config/nvim/init.vim"
    state: link
    force: true
  when:
    - neovim_config_directory is defined
  tags:
    - dotfiles
    - nvim

- name: neovim configuration file cleanup
  ansible.builtin.file:
    path: "{{ home_directory }}/.config/nvim/init.vim"
    state: absent
    force: true
  tags:
    - never

- name: neovim configuration directories cleanup
  ansible.builtin.file:
    path: "{{ home_directory }}/.config/nvim"
    state: absent
  tags:
    - never
