toggles::fzf() {
  if [ $commandx[fzf] ]; then
    [[ -s "${HOME}/.fzf.zsh" ]] && source "${HOME}/.fzf.zsh"
  fi
}

toggles::tfenv() {
  if [ $commands[tfenv] ]; then
    export PATH="${HOME}/.tfenv/bin:${PATH}"
  fi
}

toggles::pyenv() {
  export LDFLAGS="-L/usr/local/opt/zlib/lib -L/usr/local/opt/bzip2/lib"
  export CPPFLAGS="-I/usr/local/opt/zlib/include -I/usr/local/opt/bzip2/include"

  if [ $commands[pyenv] ]; then
    export PYENV_ROOT="${HOME}/.pyenv"
    export PATH="${PYENV_ROOT}/bin:${PATH}"

    eval "$(pyenv init --path)"
  fi
}

toggles::volta() {
  if [ -d "${HOME}/.volta" ]; then
    export VOLTA_HOME="${HOME}/.volta"
    export PATH="${VOLTA_HOME}/bin:${PATH}"
  fi
}

toggles::go() {
  if [ -s "${HOME}/.gorc" ]; then
    source "${HOME}/.gorc"
  fi
}

toggles::rust() {
  if [ -s "${HOME}/.cargo/env" ]; then
    source "${HOME}/.cargo/env"
  fi
}

toggles::github() {
  if [ -s "${HOME}/.env.github" ]; then
    source "${HOME}/.env.github"
  fi
}

toggles::ghe() {
  if [ -s "${HOME}/.env.IBM.ghe" ]; then
    source "${HOME}/.env.IBM.ghe"
  fi
}

toggles::travis() {
  if [ -f "${HOME}/.travis/travis.sh" ]; then
    source "${HOME}/.travis/travis.sh"
  fi
}

toggles::direnv() {
  if [ $commands[direnv] ]; then
    eval "$(direnv hook zsh)"
  fi
}

toggles::krew() {
  if [ -d "${HOME}/.krew" ]; then
    export PATH="${PATH}:${HOME}/.krew/bin"
  fi
}

toggles::ibmcloud() {
  if [ -s "${HOME}/.env.IBM.cloud.Quantum.apikey" ]; then
    source "${HOME}/.env.IBM.Cloud.Quantum.apikey"
  fi
}

toggles::log() {
  local message="${1}"

  case "${TOGGLES_VERBOSE}" in
    True|true)
      [[ -n "${message}" ]] && echo -en "${message}"
      ;;
  esac
}

main() {
  toggles::log "Toggles: "

  for t activated in ${(kv)TOGGLES_CONFIGURATION}; do
    if [ "${activated}" = true ]; then
      if typeset -f toggles::${t} >/dev/null; then
        toggles::log "${t} " && toggles::${t}
        [[ ${?} -eq 0 ]] && toggles::log "âˆš " || toggles::log "X "
      fi
    fi
  done
  toggles::log "\n"
}

# ::main::
main
