toggles::fzf() {
  if [[ $commands[fzf] ]]; then
    if [[ -s "${HOME}/.fzf.zsh" ]]; then
      source "${HOME}/.fzf.zsh"
    else
      return 1
    fi
  else
    return 1
  fi
}

toggles::tfenv() {
  if [[ $commands[tfenv] ]]; then
    export PATH="${HOME}/.tfenv/bin:${PATH}"
  else
    return 1
  fi
}

toggles::pyenv() {
  export LDFLAGS="-L/usr/local/opt/zlib/lib -L/usr/local/opt/bzip2/lib"
  export CPPFLAGS="-I/usr/local/opt/zlib/include -I/usr/local/opt/bzip2/include"

  if [[ $commands[pyenv] ]]; then
    export PYENV_ROOT="${HOME}/.pyenv"
    export PATH="${PYENV_ROOT}/bin:${PATH}"

    eval "$(pyenv init --path)"
  else
    return 1
  fi
}

toggles::mcfly() {
  if [[ $commands[mcfly] ]]; then
    eval "$(mcfly init zsh)"
  else
    return 1
  fi
}

toggles::volta() {
  if [[ -d "${HOME}/.volta" ]]; then
    export VOLTA_HOME="${HOME}/.volta"
    export PATH="${VOLTA_HOME}/bin:${PATH}"
  else
    return 1
  fi
}

toggles::go() {
  if [[ -s "${HOME}/.gorc" ]]; then
    source "${HOME}/.gorc"
  else
    return 1
  fi
}

toggles::rust() {
  if [[ -s "${HOME}/.cargo/env" ]]; then
    source "${HOME}/.cargo/env"
  else
    return 1
  fi
}

toggles::github() {
  if [[ -s "${HOME}/.env.github.jjuarez.token" ]]; then
    source "${HOME}/.env.github.jjuarez.token"
  else
    return 1
  fi
}

toggles::ghe() {
  if [[ -s "${HOME}/.env.IBM.GHE.Javier-Juarez-Martinez.token" ]]; then
    source "${HOME}/.env.IBM.GHE.Javier-Juarez-Martinez.token"
  else
    return 1
  fi
}

toggles::direnv() {
  if [[ $commands[direnv] ]]; then
    eval "$(direnv hook zsh)"
  else
    return 1
  fi
}

toggles::krew() {
  if [[ -d "${HOME}/.krew" ]]; then
    export PATH="${PATH}:${HOME}/.krew/bin"
  else
    return 1
  fi
}

toggles::ibmcloud() {
  if [[ -s "${HOME}/.env.IBM.Cloud.QCMaster.javier.juarez.martinez@ibm.com.apikey" ]]; then
    source "${HOME}/.env.IBM.Cloud.QCMaster.javier.juarez.martinez@ibm.com.apikey"
  else
    return 1
  fi
}

toggles::log() {
  local message="${1}"

  case "${TOGGLES_VERBOSE}" in
    True|true)
      [[ -n "${message}" ]] && echo -en "${message}"
      ;;
  esac
}

main() {
  toggles::log "Toggles: "

  for toggle activated in ${(kv)TOGGLES_CONFIGURATION}; do
    if [ "${activated}" = true ]; then
      if typeset -f toggles::${toggle} >/dev/null; then
        toggles::log "${toggle} " && toggles::${toggle}
        if [[ ${?} -eq 0 ]]; then 
          toggles::log "âœ… "
        else
          toggles::log "ðŸ’” "
        fi
      fi
    fi
  done
  toggles::log "\n"
}

# ::main::
main
